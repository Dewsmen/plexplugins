# -*- coding: utf-8 -*-

###################################################################################
# 
# This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# See http://creativecommons.org/licenses/by/3.0/deed.en_US for detail.
#
###################################################################################

"""
11/22/2014 Dewsmen 

urlWithCookie looks like http://watch.is/api/watch/8618#{'Cookie': 'PHPSESSID=bcm0go17vucuidd1lqpqhmct96'}

"""
import traceback

WATCHIS_URL = 'http://watch.is'

####################################################################################################
def NormalizeURL(url):
    return url

####################################################################################################
def MetadataObjectForURL(urlWithCookie):

    try:
        desc = GetDescription(urlWithCookie)
        posterUrl = '%s/posters/%s.jpg' % (WATCHIS_URL, desc['id'])

        return VideoClipObject(
            title = str(desc['title']),
            year = int(desc['year']),
            summary = str(desc['about']),
            genres = [str(desc['genre'])],
            directors = [str(desc['director'])],
            countries = [str(desc['country'])],
            duration = TimeToMs(str(desc['duration'])),
            thumb = Resource.ContentsOfURLWithFallback(posterUrl, fallback='icon-default.png')
        )
    except:
        return VideoClipObject(
            title = '<error>',
            summary = '<An error occurred while fetching metadata>',
       )

####################################################################################################
def MediaObjectsForURL(urlWithCookie):
    
    return [
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, urlWithCookie=urlWithCookie, format='hd', codecs='H264'))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            video_resolution = '720',
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, urlWithCookie=urlWithCookie, format='sd', codecs='H264'))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            video_resolution = '480',
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
        )
    ]
####################################################################################################
def GetVideoURL(urlWithCookie, format=None, codecs=None):
    desc = GetDescription(urlWithCookie)
    if format == 'hd':
        return str(desc['hdvideo'])
    
    return str(desc['video'])

####################################################################################################
@indirect
def PlayVideo(urlWithCookie, format=None, codecs=None):

    try:
        try:
            video_url = GetVideoURL(urlWithCookie, format, codecs)
        except:
            video_url = GetVideoURL(urlWithCookie, None, 'H264,VP8,VP6')

        if video_url is None:
            return None

        return IndirectResponse(VideoClipObject, key=video_url)
    except:
        Log.Exception("Couldn't find all the required info to play this video.")
        raise Ex.MediaNotAvailable

####################################################################################################
# Queue fix (PlayVideoIndirect was renamed to PlayVideo at one point)
PlayVideoIndirect = PlayVideo

####################################################################################################
def GetDescription(urlWithCookie):
    url, cookie = parseUrlWithCookie(urlWithCookie)

    Log('url %s c %s' % (url, cookie))

    try:
        descXml = XML.ElementFromURL(url, cacheTime=CACHE_1WEEK, headers = cookie)
        descString = XML.StringFromElement(descXml.xpath('//item')[0])
    except Exception, e:
        Log(e)
    return XML.ObjectFromString(descString)

####################################################################################################
def TimeToMs(timecode):
    duration = timecode[ : -7]
    seconds = int(duration) * 60
    return seconds * 1000

####################################################################################################
def parseUrlWithCookie(url):
    urlParts = url.split('#')
    return (urlParts[0], JSON.ObjectFromString(urlParts[1]))
